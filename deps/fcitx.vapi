/* fcitx.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Fcitx", gir_namespace = "Fcitx", gir_version = "1.0", lower_case_cprefix = "fcitx_")]
namespace Fcitx {
	[CCode (cheader_filename = "fcitx-gclient/fcitxclient.h", type_id = "fcitx_client_get_type ()")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		public Client ();
		public void close_ic ();
		public void enable_ic ();
		public void focus_in ();
		public void focus_out ();
		public bool is_valid ();
		[Deprecated]
		public async int process_key (uint32 keyval, uint32 keycode, uint32 state, int type, uint32 t);
		public async int process_key_async (uint32 keyval, uint32 keycode, uint32 state, int type, uint32 t, int timeout_msec, GLib.Cancellable? cancellable);
		public int process_key_sync (uint32 keyval, uint32 keycode, uint32 state, int type, uint32 t);
		public void reset ();
		public void set_capacity (uint flags);
		public void set_cursor_rect (int x, int y, int w, int h);
		[Deprecated]
		public void set_cusor_rect (int x, int y, int w, int h);
		public void set_surrounding_text (string? text, uint cursor, uint anchor);
		public signal void close_im ();
		public signal void commit_string (string string);
		public signal void connected ();
		public signal void delete_surrounding_text (int cursor, uint len);
		public signal void disconnected ();
		public signal void enable_im ();
		public signal void forward_key (uint keyval, int state, int type);
		public signal void update_client_side_ui (string auxup, string auxdown, string preedit, string candidateword, string imname, int cursor_pos);
		public signal void update_formatted_preedit (GLib.GenericArray<Fcitx.PreeditItem> preedit, int cursor);
	}
	[CCode (cheader_filename = "fcitx-gclient/fcitxconnection.h", type_id = "fcitx_connection_get_type ()")]
	public class Connection : GLib.Object {
		[CCode (has_construct_function = false)]
		public Connection ();
		public unowned GLib.DBusConnection get_g_dbus_connection ();
		public bool is_valid ();
		public signal void connected ();
		public signal void disconnected ();
	}
	[CCode (cheader_filename = "fcitx-gclient/fcitxinputmethod.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "fcitx_im_item_get_type ()")]
	[Compact]
	public class IMItem {
		public bool enable;
		public weak string langcode;
		public weak string name;
		public weak string unique_name;
		[CCode (has_construct_function = false)]
		public IMItem (string name, string unique_name, string langcode, bool enable);
	}
	[CCode (cheader_filename = "fcitx-gclient/fcitxinputmethod.h", type_id = "fcitx_input_method_get_type ()")]
	public class InputMethod : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable {
		[CCode (has_construct_function = false)]
		public InputMethod (GLib.BusType bus_type, GLib.DBusProxyFlags flags, int display_number, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void activate ();
		public void configure ();
		public void configure_addon (string addon);
		public void configure_im (string imname);
		public void exit ();
		public string get_current_im ();
		public int get_current_state ();
		public string get_current_ui ();
		public string get_im_addon (string imname);
		public GLib.GenericArray<Fcitx.IMItem> get_imlist_nofree ();
		public void inactivate ();
		public void reload_config ();
		public void restart ();
		public void set_current_im (string imname);
		public void set_imlist (GLib.GenericArray<Fcitx.IMItem> array);
		public void toggle ();
		public signal void imlist_changed ();
	}
	[CCode (cheader_filename = "fcitx-gclient/fcitxkbd.h", type_id = "fcitx_kbd_get_type ()")]
	public class Kbd : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable {
		[CCode (has_construct_function = false)]
		public Kbd (GLib.BusType bus_type, GLib.DBusProxyFlags flags, int display_number, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void get_layout_for_im (string imname, out string layout, out string variant);
		public GLib.GenericArray<Fcitx.LayoutItem> get_layouts_nofree ();
		public void set_default_layout (string layout, string variant);
		public void set_layout_for_im (string imname, string layout, string variant);
	}
	[CCode (cheader_filename = "fcitx-gclient/fcitxkbd.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "fcitx_layout_item_get_type ()")]
	[Compact]
	public class LayoutItem {
		public weak string langcode;
		public weak string layout;
		public weak string name;
		public weak string variant;
	}
	[CCode (cheader_filename = "fcitx-gclient/fcitxclient.h", has_type_id = false)]
	public struct PreeditItem {
		public weak global::string string;
		public int32 type;
	}
}
